import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o,c as r,a,b as e,d as s,e as t}from"./app-UHqMiyo5.js";const i="/assets/posts/AST/ast-flow.png",c={},d=t('<p style="text-align:center;">理解了AST, 就理解了整个前端工具链路</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>AST(Abstract Syntax Tree), 抽象语法树, 是源代码的抽象语法结构的树状表现形式.</p><p>抽象语法树是语言无关的, 任何语言都有抽象语法树.</p><p>AST在前端无处不在, 我们熟悉的开发工具几乎全依赖于AST进行开发, webpack, babel, eslint, prettier, istanbul无一不在深度使用AST, 所以学会AST, 你就可以撬动整个工具圈.</p><h2 id="编译器的工作流程" tabindex="-1"><a class="header-anchor" href="#编译器的工作流程"><span>编译器的工作流程</span></a></h2><p>编译器是AST典型的应用场景, 其最基础的部分就是对AST的处理, 从广义上讲, babel, eslint都属于编译器, 所以我们从分析一个编译器的工作流开始, 来建立对AST的基本认识.</p><figure><img src="'+i+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>编译器的工作主要分3个步骤:</p><ol><li>词法分析</li><li>语法分析</li><li>代码生成</li></ol><p>源代码:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="词法分析" tabindex="-1"><a class="header-anchor" href="#词法分析"><span>词法分析</span></a></h3><p>词法分析也叫令牌化(Tokenization), 是在源代码的基础上进行分词断句, 然后生成一连串令牌, 所谓令牌(Token), 其实就是分词断句之后, 对每个单词进行分类, 是属于关键字还是标识符还是标点符号等等. 你可以想象成词法分析就是把你的代码从string类型转换成了数组, 数组的元素就是代码里的单词, 然后对每个单词标记了类型.</p><p>大部分编辑器的语法高亮，就是用的词法分析结果.</p><p>但是词法分析结果缺少一些比较关键的信息:</p><ol><li>没有任何语法信息</li><li>体现不了代码的执行先顺序</li></ol><p>所以需要进一步进行语法分析.</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Keyword&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;const&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;age&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Punctuator&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;=&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Numeric&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;18&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Punctuator&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;;&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="语法分析" tabindex="-1"><a class="header-anchor" href="#语法分析"><span>语法分析</span></a></h3><p>语法分析也叫解析(Parsing), 是在词法分析的基础上, 把令牌列表转换成抽象语法树.</p>`,21),u={href:"https://astexplorer.net/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://astexplorer.net/#/gist/3fad609ffc39889a0af69602bc57c0b7/da825e63460326ff79bbb605085a76901239a012",target:"_blank",rel:"noopener noreferrer"},h=a("iframe",{src:"https://astexplorer.net/#/gist/3fad609ffc39889a0af69602bc57c0b7/da825e63460326ff79bbb605085a76901239a012",width:"100%",height:"400px"},null,-1),k=a("p",null,[e("抽象语法树会略去一些无关紧要的信息, 比如代码末尾的"),a("code",null,";"),e("在抽象语法树里没有任何记录, 这也是抽象语法树名字里抽象两个字的由来, 是因为这里的语法并不会表示出真实语法中出现的每个细节.")],-1),v=a("p",null,"联系前面一个步骤, 你可以把这两个步骤想象成DOM树的解析过程, 词法分析就相当于是把HTML代码转换成body, div等各种标签的组合, 而语法分析就相当于是在把各种标签转换成DOM树.",-1),m=a("h3",{id:"代码生成",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#代码生成"},[a("span",null,"代码生成")])],-1),g=a("p",null,"有了抽象语法树, 我们可以把代码转换成任何我们想转换成的格式. 就比如我们常用的Babel, 就是把我们写的ES6, ES7语法转换成低版本浏览器可以识别的ES5.",-1),f={href:"https://astexplorer.net/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://astexplorer.net/#/gist/3fad609ffc39889a0af69602bc57c0b7/f3d8a86ef373dc666a77e702de1ce252ad4296fa",target:"_blank",rel:"noopener noreferrer"},y=a("code",null,"const",-1),S=a("code",null,"var",-1),T=a("iframe",{src:"https://astexplorer.net/#/gist/3fad609ffc39889a0af69602bc57c0b7/f3d8a86ef373dc666a77e702de1ce252ad4296fa",width:"100%",height:"600px"},null,-1),x=a("p",null,"为什么非要基于抽象语法树做代码转换, 而不能直接用词法分析结果的令牌列表或者干脆直接读取源代码做字符串替换呢? 原因非常简单, 字符串或者令牌列表没有任何语法信息, 我们很难做到正确转换. 比如, 我们要重命名一个变量, 在令牌列表或者字符串里, 我们很难判断出这个变量的作用域, 以及它还在哪些地方有使用, 以及重命名之后是否会和其他变量名产生冲突, 但如果基于AST做这些, 将会变得异常容易.",-1),A=a("h2",{id:"如何阅读ast的数据结构",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#如何阅读ast的数据结构"},[a("span",null,"如何阅读AST的数据结构")])],-1),q={href:"https://github.com/estree/estree",target:"_blank",rel:"noopener noreferrer"},w=t(`<p>ESTree里按照每个JS版本的语法规范分别定义了数据结构, 以<code>es5</code>为基础, 后续的<code>es2015</code>, <code>es2016</code>等等都是基于<code>es5</code>进行扩展</p><p>以<code>VariableDeclaration</code>(变量声明)为例, 在es5里的数据结构是:</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">VariableDeclaration</span> <span class="token operator">&lt;</span><span class="token operator">:</span> Declaration <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&quot;VariableDeclaration&quot;</span><span class="token punctuation">;</span>
  declarations<span class="token operator">:</span> <span class="token punctuation">[</span> VariableDeclarator <span class="token punctuation">]</span><span class="token punctuation">;</span>
  kind<span class="token operator">:</span> <span class="token string">&quot;var&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在es6里的数据结构是:</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>extend <span class="token keyword">interface</span> <span class="token class-name">VariableDeclaration</span> <span class="token punctuation">{</span>
  kind<span class="token operator">:</span> <span class="token string">&quot;var&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;let&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;const&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见, 在es5的基础上, es6新增了let和const</p>`,6),j={href:"https://astexplorer.net/#/gist/3fad609ffc39889a0af69602bc57c0b7/f91d69bf54dea7e39a1fb05341f6c261293e05a4",target:"_blank",rel:"noopener noreferrer"},V=t('<iframe src="https://astexplorer.net/#/gist/3fad609ffc39889a0af69602bc57c0b7/f91d69bf54dea7e39a1fb05341f6c261293e05a4" width="100%" height="400px"></iframe><h2 id="babel插件开发入门" tabindex="-1"><a class="header-anchor" href="#babel插件开发入门"><span>babel插件开发入门</span></a></h2><h3 id="开发手册" tabindex="-1"><a class="header-anchor" href="#开发手册"><span>开发手册</span></a></h3>',3),E={href:"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md",target:"_blank",rel:"noopener noreferrer"},D={href:"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md#toc-babylon",target:"_blank",rel:"noopener noreferrer"},z={href:"https://github.com/babel/babel/tree/master/packages/babel-parser",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md#babel-traverse",target:"_blank",rel:"noopener noreferrer"},H={href:"https://github.com/babel/babel/tree/master/packages/babel-traverse",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md#babel-types",target:"_blank",rel:"noopener noreferrer"},B={href:"https://github.com/babel/babel/tree/master/packages/babel-types",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md#babel-generator",target:"_blank",rel:"noopener noreferrer"},J={href:"https://github.com/babel/babel/tree/master/packages/babel-generator",target:"_blank",rel:"noopener noreferrer"},M={href:"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md#babel-template",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/babel/babel/tree/master/packages/babel-template",target:"_blank",rel:"noopener noreferrer"},O=t(`<p>我们前面讲到编译器有三大环节, 这个开发手册主要就是聚焦在第三个环节: 代码生成, 告诉你在babel插件里如何遍历AST, 如何修改AST, 有哪些注意事项. 下面我也按这三个部分, 给大家分析一下.</p><h4 id="如何遍历ast" tabindex="-1"><a class="header-anchor" href="#如何遍历ast"><span>如何遍历AST</span></a></h4><h5 id="深递归遍历" tabindex="-1"><a class="header-anchor" href="#深递归遍历"><span>深递归遍历</span></a></h5><p>想要转换AST, 需要对AST树形结构做深递归遍历, 也就是从入口开始, 挨个往下遍历, 遇到一个节点有子节点, 会继续遍历这个节点的子节点，直到把所有的子节点遍历完, 再一步一步返回, 遍历其他节点.</p><p>举例说明:</p><iframe src="https://astexplorer.net/#/gist/3fad609ffc39889a0af69602bc57c0b7/04a064de6bde132234c5ee8a83820b83a7e0dd93" width="100%" height="400px"></iframe><h5 id="visitors-访问者" tabindex="-1"><a class="header-anchor" href="#visitors-访问者"><span>Visitors(访问者)</span></a></h5><p>访问者模式提供了方法用于在遍历AST的过程中, 获取到具体的节点, 在遍历AST过程中, 会涉及到进入一个节点, 和退出一个节点, 对应的访问者也有这两个模式.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token parameter">babel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">visitor</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">Identifier</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">enter</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token parameter">babel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">visitor</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">Identifier</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 等效于</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token parameter">babel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">visitor</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">Identifier</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">enter</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="如何修改ast" tabindex="-1"><a class="header-anchor" href="#如何修改ast"><span>如何修改AST</span></a></h4><h5 id="paths-路径" tabindex="-1"><a class="header-anchor" href="#paths-路径"><span>Paths(路径)</span></a></h5><p>在babel的插件中, 不会让你直接修改对应的节点, babel在AST节点的基础上做了一层封装, 这一层封装叫路径, 一个路径包含有具体的节点, 以及这个节点的父级节点和父级路径, 等其他关联信息. 在访问者函数里的第一个参数就是路径.</p><p>你可以想象成路径是babel暴露给我们的最外层的接口, 我们所有的操作都需要基于路径提供的接口来实现</p><h5 id="scopes-作用域" tabindex="-1"><a class="header-anchor" href="#scopes-作用域"><span>Scopes(作用域)</span></a></h5><p>每个路径上都有一个<code>scope</code>属性, 用于标明这个路径所属的作用域是哪个.</p><h5 id="bindings-绑定" tabindex="-1"><a class="header-anchor" href="#bindings-绑定"><span>Bindings(绑定)</span></a></h5><p>每个<code>scope</code>上都有一个<code>bindings</code>属性, 用于标明这个作用域下绑定了多少引用.</p><h5 id="举例说明" tabindex="-1"><a class="header-anchor" href="#举例说明"><span>举例说明</span></a></h5>`,19),Z={href:"https://astexplorer.net/#/gist/3fad609ffc39889a0af69602bc57c0b7/f7086c21a276863db5363075a2d53c61e8d67fc2",target:"_blank",rel:"noopener noreferrer"},Q=t(`<iframe src="https://astexplorer.net/#/gist/3fad609ffc39889a0af69602bc57c0b7/f7086c21a276863db5363075a2d53c61e8d67fc2" width="100%" height="600px"></iframe><h5 id="babel-parser" tabindex="-1"><a class="header-anchor" href="#babel-parser"><span>@babel/parser</span></a></h5><p>是babel把源代码转换成AST的核心部件, 但一般开发插件用不到, 因为我们可以通过访问者模式, 直接拿到路径信息</p><h5 id="babel-traverse" tabindex="-1"><a class="header-anchor" href="#babel-traverse"><span>@babel/traverse</span></a></h5><p>是babel提供的用于递归遍历AST的部件</p><h5 id="babel-types" tabindex="-1"><a class="header-anchor" href="#babel-types"><span>@babel/types</span></a></h5><p>是babel提供的一个转换AST的工具集，你可以想象成babel的lodash, 里面有很多现成的api可用.</p><p>我们在写插件的时候, 暴露出去的方法会获得一个babel对象, 里面有个属性值<code>types</code>, 就是这个<code>@babel/types</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token parameter">babel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>babel<span class="token punctuation">.</span>types<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="babel-generator" tabindex="-1"><a class="header-anchor" href="#babel-generator"><span>@babel/generator</span></a></h5><p>是babel提供的一个代码生成器, 把转换之后的AST生成对应的代码, 插件里一般用不到</p><h5 id="babel-template" tabindex="-1"><a class="header-anchor" href="#babel-template"><span>@babel/template</span></a></h5><p>是babel提供的部件, 可以基于字符串模板生成AST</p><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h3><p>babel的插件系统非常庞大, 但是他的开发文档, 确实不怎么友好, 很多接口都需要翻阅源码才能找到. 下面就注明一些接口文档的地址.</p><ul><li>@babel/types: https://babeljs.io/docs/en/babel-types.html</li><li>babel的AST规范: https://github.com/babel/babel/blob/master/packages/babel-parser/ast/spec.md</li><li>路径相关接口: <ul><li>https://github.com/babel/babel/tree/1ef78ca55b39773cbb5974960b7b34e2fca6e043/packages/babel-traverse/src/path</li></ul></li><li>作用域相关接口: <ul><li>https://github.com/babel/babel/tree/1ef78ca55b39773cbb5974960b7b34e2fca6e043/packages/babel-traverse/src/scope</li></ul></li><li>AST节点类型的定义: https://github.com/babel/babel/tree/5b99b8f2217eb253edc66728eedb2ec260d8065d/packages/babel-types/src/definitions</li></ul><h3 id="babel插件-移除vue的公共接口调用" tabindex="-1"><a class="header-anchor" href="#babel插件-移除vue的公共接口调用"><span>babel插件: 移除vue的公共接口调用</span></a></h3><p>这个babel插件是日事清的vue-cli-plugin-rishiqing里的一个功能. 日事清的web端是基于微应用进行开发的, 由于各个微应用在线上的时候是共用同一个vue, 为了防止微应用里不小心调用vue的公共接口导致全局的vue的状态被污染, 然后开发了这么一个babel插件, 在构建生产环境的微应用代码的时候自动把这些调用公共接口的代码给移除了.</p><p>公共接口包括:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span>directive
Vue<span class="token punctuation">.</span>filter
Vue<span class="token punctuation">.</span>component
Vue<span class="token punctuation">.</span>use
Vue<span class="token punctuation">.</span>mixin
Vue<span class="token punctuation">.</span>config
<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),U={href:"https://astexplorer.net/#/gist/3fad609ffc39889a0af69602bc57c0b7/69c709b0c2f727c34d855233bb7fbd9c111d2313",target:"_blank",rel:"noopener noreferrer"},Y=t('<iframe src="https://astexplorer.net/#/gist/3fad609ffc39889a0af69602bc57c0b7/69c709b0c2f727c34d855233bb7fbd9c111d2313" width="100%" height="600px"></iframe><h2 id="ast的其他应用场景" tabindex="-1"><a class="header-anchor" href="#ast的其他应用场景"><span>AST的其他应用场景</span></a></h2><h3 id="有人知道istanbul是如何检测代码的测试覆盖率的吗" tabindex="-1"><a class="header-anchor" href="#有人知道istanbul是如何检测代码的测试覆盖率的吗"><span>有人知道istanbul是如何检测代码的测试覆盖率的吗?</span></a></h3><h3 id="有人知道为什么eslint要留一个parser参数-供用户配置吗" tabindex="-1"><a class="header-anchor" href="#有人知道为什么eslint要留一个parser参数-供用户配置吗"><span>有人知道为什么eslint要留一个parser参数, 供用户配置吗?</span></a></h3><h3 id="有人想过-如何一键把vue2-0的代码自动重构成vue3-0的代码吗" tabindex="-1"><a class="header-anchor" href="#有人想过-如何一键把vue2-0的代码自动重构成vue3-0的代码吗"><span>有人想过, 如何一键把vue2.0的代码自动重构成vue3.0的代码吗?</span></a></h3><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h2><ul><li>https://www.twilio.com/blog/abstract-syntax-trees</li><li>https://www.semantics3.com/blog/understanding-code-coverage-1074e8fccce0/</li><li>https://eslint.org/docs/developer-guide/working-with-custom-parsers</li><li>https://github.com/jamiebuilds/babel-handbook</li></ul>',7);function C(K,R){const n=l("ExternalLinkIcon");return o(),r("div",null,[d,a("p",null,[e("从下面 "),a("a",u,[e("AST Explorer"),s(n)]),e(" ("),a("a",b,[e("在新窗口打开"),s(n)]),e(")的数据可以看到, 抽象语法树携带了更多的语法信息, 在词法分析的结果里, 我们只能看到代码里有哪些关键字, 有哪些标识符, 但是在抽象语法树里, 我们却能看出这句代码是在做变量声明.")]),h,k,v,m,g,a("p",null,[e("比如下面这个"),a("a",f,[e("AST Explorer"),s(n)]),e("例子("),a("a",_,[e("在新窗口打开"),s(n)]),e("), 就是利用babel插件, 把"),y,e("转换成"),S]),T,x,A,a("p",null,[e("JS的AST工具可谓是争奇斗艳, 各家都有各自的实现, 从AST Explorer上可以看到, 有关JS的AST转换工具都有十几个, 但有个好消息是, JS的AST有一个行业标准: "),a("a",q,[e("ESTree"),s(n)]),e(", ESTree定义了每个语法信息在AST里的数据结构, 各家也不是完全按照ESTree定义的结构来实现的AST, 都有增删数据, 但大体上是相同的.")]),w,a("p",null,[e("以下是一个较为复杂的例子("),a("a",j,[e("在新窗口打开"),s(n)]),e("):")]),V,a("p",null,[e("社区里有人写了一份babel的插件手册, 同时也有"),a("a",E,[e("中文翻译"),s(n)]),e(", 非常详尽, 通篇读下来之后, 你会对AST和Babel插件的开发有一个非常全面的认识. 这个手册的最近更新时间是在2017年12月份, 阅读的时候有几个注意点:")]),a("ol",null,[a("li",null,[a("a",D,[e("babylon"),s(n)]),e(": babylon已经非废弃, babel现在用的是"),a("a",z,[e("@babel/parser"),s(n)])]),a("li",null,[a("a",P,[e("babel-traverse"),s(n)]),e(": 已经被更新为"),a("a",H,[e("@babel/traverse"),s(n)])]),a("li",null,[a("a",N,[e("babel-types"),s(n)]),e(": 已经被更新为"),a("a",B,[e("@babel/types"),s(n)])]),a("li",null,[a("a",I,[e("babel-generator"),s(n)]),e(": 已经被更新为"),a("a",J,[e("@babel/generator"),s(n)])]),a("li",null,[a("a",M,[e("babel-template"),s(n)]),e(": 已经被更新为"),a("a",L,[e("@babel/template"),s(n)])])]),O,a("p",null,[a("a",Z,[e("新窗口打开"),s(n)]),e(", 需要打开控制台查看路径信息")]),Q,a("p",null,[a("a",U,[e("在新窗口打开"),s(n)])]),Y])}const W=p(c,[["render",C],["__file","AST.html.vue"]]),X=JSON.parse('{"path":"/posts/AST.html","title":"AST","lang":"en-US","frontmatter":{"title":"AST","date":"2021-04-06T04:10:30.000Z","tag":["AST","抽象语法树","babel"],"cover":"/assets/posts/AST/ast-flow.png","description":"理解了AST, 就理解了整个前端工具链路 简介 AST(Abstract Syntax Tree), 抽象语法树, 是源代码的抽象语法结构的树状表现形式. 抽象语法树是语言无关的, 任何语言都有抽象语法树. AST在前端无处不在, 我们熟悉的开发工具几乎全依赖于AST进行开发, webpack, babel, eslint, prettier, ist...","head":[["meta",{"property":"og:url","content":"https://nodepie.com/posts/AST.html"}],["meta",{"property":"og:site_name","content":"NodePie"}],["meta",{"property":"og:title","content":"AST"}],["meta",{"property":"og:description","content":"理解了AST, 就理解了整个前端工具链路 简介 AST(Abstract Syntax Tree), 抽象语法树, 是源代码的抽象语法结构的树状表现形式. 抽象语法树是语言无关的, 任何语言都有抽象语法树. AST在前端无处不在, 我们熟悉的开发工具几乎全依赖于AST进行开发, webpack, babel, eslint, prettier, ist..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://nodepie.com/assets/posts/AST/ast-flow.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://nodepie.com/assets/posts/AST/ast-flow.png"}],["meta",{"name":"twitter:image:alt","content":"AST"}],["meta",{"property":"article:author","content":"QinYang"}],["meta",{"property":"article:tag","content":"AST"}],["meta",{"property":"article:tag","content":"抽象语法树"}],["meta",{"property":"article:tag","content":"babel"}],["meta",{"property":"article:published_time","content":"2021-04-06T04:10:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"AST\\",\\"image\\":[\\"https://nodepie.com/assets/posts/AST/ast-flow.png\\"],\\"datePublished\\":\\"2021-04-06T04:10:30.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"QinYang\\",\\"url\\":\\"https://nodepie.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"编译器的工作流程","slug":"编译器的工作流程","link":"#编译器的工作流程","children":[{"level":3,"title":"词法分析","slug":"词法分析","link":"#词法分析","children":[]},{"level":3,"title":"语法分析","slug":"语法分析","link":"#语法分析","children":[]},{"level":3,"title":"代码生成","slug":"代码生成","link":"#代码生成","children":[]}]},{"level":2,"title":"如何阅读AST的数据结构","slug":"如何阅读ast的数据结构","link":"#如何阅读ast的数据结构","children":[]},{"level":2,"title":"babel插件开发入门","slug":"babel插件开发入门","link":"#babel插件开发入门","children":[{"level":3,"title":"开发手册","slug":"开发手册","link":"#开发手册","children":[]},{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]},{"level":3,"title":"babel插件: 移除vue的公共接口调用","slug":"babel插件-移除vue的公共接口调用","link":"#babel插件-移除vue的公共接口调用","children":[]}]},{"level":2,"title":"AST的其他应用场景","slug":"ast的其他应用场景","link":"#ast的其他应用场景","children":[{"level":3,"title":"有人知道istanbul是如何检测代码的测试覆盖率的吗?","slug":"有人知道istanbul是如何检测代码的测试覆盖率的吗","link":"#有人知道istanbul是如何检测代码的测试覆盖率的吗","children":[]},{"level":3,"title":"有人知道为什么eslint要留一个parser参数, 供用户配置吗?","slug":"有人知道为什么eslint要留一个parser参数-供用户配置吗","link":"#有人知道为什么eslint要留一个parser参数-供用户配置吗","children":[]},{"level":3,"title":"有人想过, 如何一键把vue2.0的代码自动重构成vue3.0的代码吗?","slug":"有人想过-如何一键把vue2-0的代码自动重构成vue3-0的代码吗","link":"#有人想过-如何一键把vue2-0的代码自动重构成vue3-0的代码吗","children":[]}]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":8.94,"words":2683},"filePathRelative":"posts/AST.md","localizedDate":"April 6, 2021","excerpt":"<p style=\\"text-align: center;\\">理解了AST, 就理解了整个前端工具链路</p>\\n<h2>简介</h2>\\n<p>AST(Abstract Syntax Tree), 抽象语法树, 是源代码的抽象语法结构的树状表现形式.</p>\\n<p>抽象语法树是语言无关的, 任何语言都有抽象语法树.</p>\\n<p>AST在前端无处不在, 我们熟悉的开发工具几乎全依赖于AST进行开发, webpack, babel, eslint, prettier, istanbul无一不在深度使用AST, 所以学会AST, 你就可以撬动整个工具圈.</p>\\n<h2>编译器的工作流程</h2>\\n","autoDesc":true}');export{W as comp,X as data};
