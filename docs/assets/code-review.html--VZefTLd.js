import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as a,e as i}from"./app-UHqMiyo5.js";const l="/assets/posts/code-review/pull_request_template.md.png",s="/assets/posts/code-review/pull_request_item.png",n="/assets/posts/code-review/flow.svg",o={},r=i('<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><p>这是一个很久之前我就想在前端团队里推的一个事情，基于这么几个原因吧:</p><ol><li>一直以来，前端的代码审查都是我一个人在做，仅仅是关注大家对公共文件的修改，还有就是一些明显的逻辑问题，但其实大部分问题靠我一个人是发现不了的</li><li>我们自己总是容易陷入逻辑怪圈，在写代码的时候，很难发现自己的问题，但是看别人的代码的时候，往往比较挑剔，更容易发现别人的问题</li><li>促进我们的日常代码交流，吸收别人的优秀经验</li><li>当你知道某个人会审查你的代码的时候，你会更加严格要求自己</li><li>培养我们写出优秀代码的习惯，实现团队和个人的共同进步</li><li>我们需要更加关注代码的质量</li><li>Code Review可以有效的和重构相结合，给我们重构提供有力证据，推动我们进行重构工作</li></ol><h2 id="审查些什么" tabindex="-1"><a class="header-anchor" href="#审查些什么"><span>审查些什么</span></a></h2><h3 id="审查清单" tabindex="-1"><a class="header-anchor" href="#审查清单"><span>审查清单</span></a></h3><p>如果你所在的团队和我们一样，也刚开始做Code Review，对代码审查到底应该审查些什么感到茫然，在网上搜了很多审查清单，发现非常零碎，也不知道哪些应该遵守，哪些不应该遵守。我的建议是，可以根据团队现有的开发情况，自己大概整理一份审查清单，也不用太完整，只要建立好完整的整理机制，在实施Code Review的过程中，自己总结提炼，以及修改维护之前的审查清单，这样在完善审查清单的过程中，也对健全团队的Code Review机制非常有帮助，让团队成员对新增的审查清单更加有认同感。</p><h3 id="代码格式" tabindex="-1"><a class="header-anchor" href="#代码格式"><span>代码格式</span></a></h3><p>到底要不要在代码审查的时候审查代码的格式，都各说不一。个人觉得代码格式不应该成为代码审查重要的关注点，格式问题，更多应该是靠开发者自己去发现解决，借eslint和sass-lint这类工具辅助，以及团队的代码规范，在提交审核之前就应该做到没有问题。代码审查本来就是为了审核功能的实现方式，代码的组织形式等等有没有更优解，但也不是说完全不关注，如果发现了格式问题，还是需要提出来。</p><h3 id="审查形式" tabindex="-1"><a class="header-anchor" href="#审查形式"><span>审查形式</span></a></h3><p>总体来说，代码审查有两种形式，小片段式和大规模式</p><h4 id="小片段式" tabindex="-1"><a class="header-anchor" href="#小片段式"><span>小片段式</span></a></h4><p>小片段式的代码审查，又称事前审查，是在代码合并到主分支之前就做的一种审查形式。如果发现了问题，在代码合并之前就会进行需改。这种形式可以直接在线上进行，代码提交者和审查者可完全线上进行交流。</p><h4 id="大规模式" tabindex="-1"><a class="header-anchor" href="#大规模式"><span>大规模式</span></a></h4><p>大规模式的代码审查，又称事后审查，团队可以每两个星期或者一个月组织一次大模块式的Code Review会议，大家在会上进行大规模的代码检视，提出问题并记录，之后可以以重构的方式来处理在会议上发现的问题.</p><h4 id="哪种形式更好" tabindex="-1"><a class="header-anchor" href="#哪种形式更好"><span>哪种形式更好</span></a></h4><p>这两种形式各有各的好处，小片段式的方式让我们可以在审查较小代码量的情况下就能进行，并且可以在代码合并之前进行，这样可以提前发现一些bug，而大规模式可以几个人一起在会议上站在一个更高的层面去审核代码，彼此交流开发经验。我推荐是小片段式和大规模式相结合。</p><h3 id="怎么审查" tabindex="-1"><a class="header-anchor" href="#怎么审查"><span>怎么审查</span></a></h3><h4 id="审查工具" tabindex="-1"><a class="header-anchor" href="#审查工具"><span>审查工具</span></a></h4><p>我们的代码管理用的github，github提供了非常棒的Code Review功能。利用github提供的pull request模板功能，让代码提交者根据这个模板去填写每次提交pull request需要的信息。另外github的markdown支持checkbox，我们可以把一些非常重要的，每次都需要检视的审查项列到模板里去，这样提交者就可以按照这个列表自己提前检查一遍，也可以减少审查者的工作。下面是我们现在用的一个模板 <img src="'+l+'" alt="pull request 模板" loading="lazy"> 前面6个checkbox，是提交者每次都必须自查一遍，然后打钩，这6个checkbox不打完钩，就不会进入正常的审查流程，最后一个checkbox是审查者在审查完了之后打钩，表示这个pull request没问题，可以进行合并。如果团队的代码审查和代码合并不是同一个人，那么负责合并的人可以在pull request列表里看到每个pull request的进度，如下图 <img src="'+s+'" alt="pull request item" loading="lazy"> 如果所有checkbox已经完成，表示这个pull request可以进行合并</p><h4 id="通知工具" tabindex="-1"><a class="header-anchor" href="#通知工具"><span>通知工具</span></a></h4><p>用了github，当然是用github强大的邮件通知功能了。为了防止常用邮箱的通知爆炸，可以专门注册一个邮箱来接收github的邮件通知。推荐使用网易邮箱客户端，它有邮件分类功能，可以做到只通知部分邮件，防止打扰。</p><h2 id="代码审查的一些心得" tabindex="-1"><a class="header-anchor" href="#代码审查的一些心得"><span>代码审查的一些心得</span></a></h2><ol><li>作为审查者，你需要知道你在给谁review代码</li><li>每个pull request应该尽可能的小，这样才能快速且安全的review</li><li>开放心态，虚心接受别人提的意见，要么采纳，要么说出自己反驳的理由</li><li>我们是人，不是机器，是人就会犯错，很正常</li><li>对公共文件的修改需要加倍关注，这些代码一旦出问题，会导致严重的错误</li></ol><h2 id="附上我们团队代码审查的流程图" tabindex="-1"><a class="header-anchor" href="#附上我们团队代码审查的流程图"><span>附上我们团队代码审查的流程图</span></a></h2><figure><img src="'+n+'" alt="流程图" tabindex="0" loading="lazy"><figcaption>流程图</figcaption></figure>',25),p=[r];function c(d,h){return t(),a("div",null,p)}const g=e(o,[["render",c],["__file","code-review.html.vue"]]),v=JSON.parse('{"path":"/posts/code-review.html","title":"代码审查的正确姿势","lang":"en-US","frontmatter":{"title":"代码审查的正确姿势","date":"2018-05-29T12:55:42.000Z","tag":["code","review"],"cover":"/assets/posts/code-review/code-review.png","description":"背景 这是一个很久之前我就想在前端团队里推的一个事情，基于这么几个原因吧: 一直以来，前端的代码审查都是我一个人在做，仅仅是关注大家对公共文件的修改，还有就是一些明显的逻辑问题，但其实大部分问题靠我一个人是发现不了的 我们自己总是容易陷入逻辑怪圈，在写代码的时候，很难发现自己的问题，但是看别人的代码的时候，往往比较挑剔，更容易发现别人的问题 促进我们的...","head":[["meta",{"property":"og:url","content":"https://nodepie.com/posts/code-review.html"}],["meta",{"property":"og:site_name","content":"NodePie"}],["meta",{"property":"og:title","content":"代码审查的正确姿势"}],["meta",{"property":"og:description","content":"背景 这是一个很久之前我就想在前端团队里推的一个事情，基于这么几个原因吧: 一直以来，前端的代码审查都是我一个人在做，仅仅是关注大家对公共文件的修改，还有就是一些明显的逻辑问题，但其实大部分问题靠我一个人是发现不了的 我们自己总是容易陷入逻辑怪圈，在写代码的时候，很难发现自己的问题，但是看别人的代码的时候，往往比较挑剔，更容易发现别人的问题 促进我们的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://nodepie.com/assets/posts/code-review/code-review.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://nodepie.com/assets/posts/code-review/code-review.png"}],["meta",{"name":"twitter:image:alt","content":"代码审查的正确姿势"}],["meta",{"property":"article:author","content":"QinYang"}],["meta",{"property":"article:tag","content":"code"}],["meta",{"property":"article:tag","content":"review"}],["meta",{"property":"article:published_time","content":"2018-05-29T12:55:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"代码审查的正确姿势\\",\\"image\\":[\\"https://nodepie.com/assets/posts/code-review/pull_request_template.md.png\\",\\"https://nodepie.com/assets/posts/code-review/pull_request_item.png\\",\\"https://nodepie.com/assets/posts/code-review/flow.svg\\"],\\"datePublished\\":\\"2018-05-29T12:55:42.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"QinYang\\",\\"url\\":\\"https://nodepie.com\\"}]}"]]},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"审查些什么","slug":"审查些什么","link":"#审查些什么","children":[{"level":3,"title":"审查清单","slug":"审查清单","link":"#审查清单","children":[]},{"level":3,"title":"代码格式","slug":"代码格式","link":"#代码格式","children":[]},{"level":3,"title":"审查形式","slug":"审查形式","link":"#审查形式","children":[]},{"level":3,"title":"怎么审查","slug":"怎么审查","link":"#怎么审查","children":[]}]},{"level":2,"title":"代码审查的一些心得","slug":"代码审查的一些心得","link":"#代码审查的一些心得","children":[]},{"level":2,"title":"附上我们团队代码审查的流程图","slug":"附上我们团队代码审查的流程图","link":"#附上我们团队代码审查的流程图","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":5.18,"words":1555},"filePathRelative":"posts/code-review.md","localizedDate":"May 29, 2018","excerpt":"<h2>背景</h2>\\n<p>这是一个很久之前我就想在前端团队里推的一个事情，基于这么几个原因吧:</p>\\n<ol>\\n<li>一直以来，前端的代码审查都是我一个人在做，仅仅是关注大家对公共文件的修改，还有就是一些明显的逻辑问题，但其实大部分问题靠我一个人是发现不了的</li>\\n<li>我们自己总是容易陷入逻辑怪圈，在写代码的时候，很难发现自己的问题，但是看别人的代码的时候，往往比较挑剔，更容易发现别人的问题</li>\\n<li>促进我们的日常代码交流，吸收别人的优秀经验</li>\\n<li>当你知道某个人会审查你的代码的时候，你会更加严格要求自己</li>\\n<li>培养我们写出优秀代码的习惯，实现团队和个人的共同进步</li>\\n<li>我们需要更加关注代码的质量</li>\\n<li>Code Review可以有效的和重构相结合，给我们重构提供有力证据，推动我们进行重构工作</li>\\n</ol>","autoDesc":true}');export{g as comp,v as data};
